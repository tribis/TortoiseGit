 ext/scintilla/include/Scintilla.h    |  1 +
 ext/scintilla/src/EditView.cxx       | 14 +++++++++++++-
 ext/scintilla/src/EditView.h         |  1 +
 ext/scintilla/src/Editor.cxx         |  1 +
 ext/scintilla/src/Editor.h           |  1 +
 ext/scintilla/win32/ScintillaWin.cxx |  8 ++++++++
 6 files changed, 25 insertions(+), 1 deletion(-)

diff --git a/ext/scintilla/include/Scintilla.h b/ext/scintilla/include/Scintilla.h
index 9b1d6514c..19559824b 100644
--- a/ext/scintilla/include/Scintilla.h
+++ b/ext/scintilla/include/Scintilla.h
@@ -1111,6 +1111,7 @@ typedef sptr_t (*SciFnDirect)(sptr_t ptr, unsigned int iMessage, uptr_t wParam,
 #define SCI_SETBIDIRECTIONAL 2709
 #endif
 /* --Autogenerated -- end of section automatically generated from Scintilla.iface */
+#define SCN_GETBKCOLOR 5000
 
 /* These structures are defined to be exactly the same shape as the Win32
  * CHARRANGE, TEXTRANGE, FINDTEXTEX, FORMATRANGE, and NMHDR structs.
diff --git a/ext/scintilla/src/EditView.cxx b/ext/scintilla/src/EditView.cxx
index aeee3778b..449c45c2e 100644
--- a/ext/scintilla/src/EditView.cxx
+++ b/ext/scintilla/src/EditView.cxx
@@ -56,6 +56,7 @@
 #include "MarginView.h"
 #include "EditView.h"
 #include "ElapsedPeriod.h"
+#include "Editor.h"
 
 using namespace Scintilla;
 
@@ -189,6 +190,7 @@ EditView::EditView() {
 	tabArrowHeight = 4;
 	customDrawTabArrow = nullptr;
 	customDrawWrapMarker = nullptr;
+	editor = nullptr;
 }
 
 EditView::~EditView() {
@@ -1879,7 +1881,17 @@ void EditView::DrawLine(Surface *surface, const EditModel &model, const ViewStyl
 	}
 
 	// See if something overrides the line background color.
-	const ColourOptional background = vsDraw.Background(model.pdoc->GetMark(line), model.caret.active, ll->containsCaret);
+	ColourOptional background = vsDraw.Background(model.pdoc->GetMark(line), model.caret.active, ll->containsCaret);
+	SCNotification scn = { 0 };
+	scn.nmhdr.code = SCN_GETBKCOLOR;
+	scn.line = line;
+	scn.lParam = -1;
+	if (editor)
+		reinterpret_cast<Editor*>(editor)->NotifyParent(&scn);
+	if (scn.lParam != -1) {
+		background.Set(static_cast<long>(scn.lParam));
+		background.isSet = true;
+	}
 
 	const Sci::Position posLineStart = model.pdoc->LineStart(line);
 
diff --git a/ext/scintilla/src/EditView.h b/ext/scintilla/src/EditView.h
index 8a4bf9e82..034eb7866 100644
--- a/ext/scintilla/src/EditView.h
+++ b/ext/scintilla/src/EditView.h
@@ -77,6 +77,7 @@ public:
 	std::unique_ptr<Surface> pixmapLine;
 	std::unique_ptr<Surface> pixmapIndentGuide;
 	std::unique_ptr<Surface> pixmapIndentGuideHighlight;
+	void	*editor;
 
 	LineLayoutCache llc;
 	PositionCache posCache;
diff --git a/ext/scintilla/src/Editor.cxx b/ext/scintilla/src/Editor.cxx
index 0e6cc7088..9f07b964d 100644
--- a/ext/scintilla/src/Editor.cxx
+++ b/ext/scintilla/src/Editor.cxx
@@ -104,6 +104,7 @@ static inline bool IsAllSpacesOrTabs(const char *s, unsigned int len) {
 }
 
 Editor::Editor() {
+	view.editor = this;
 	ctrlID = 0;
 
 	stylesValid = false;
diff --git a/ext/scintilla/src/Editor.h b/ext/scintilla/src/Editor.h
index c2a92cbec..90e73e312 100644
--- a/ext/scintilla/src/Editor.h
+++ b/ext/scintilla/src/Editor.h
@@ -594,6 +594,7 @@ protected:	// ScintillaBase subclass needs access to much of Editor
 	static sptr_t BytesResult(sptr_t lParam, const unsigned char *val, size_t len);
 
 public:
+	virtual void NotifyParent(SCNotification* scn) = 0;
 	// Public so the COM thunks can access it.
 	bool IsUnicodeMode() const;
 	// Public so scintilla_send_message can use it.
diff --git a/ext/scintilla/win32/ScintillaWin.cxx b/ext/scintilla/win32/ScintillaWin.cxx
index ac4687c7f..1caaae8d4 100644
--- a/ext/scintilla/win32/ScintillaWin.cxx
+++ b/ext/scintilla/win32/ScintillaWin.cxx
@@ -358,6 +358,7 @@ class ScintillaWin :
 	void SetCtrlID(int identifier) override;
 	int GetCtrlID() override;
 	void NotifyParent(SCNotification scn) override;
+	void NotifyParent(SCNotification* scn) override;
 	void NotifyDoubleClick(Point pt, int modifiers) override;
 	CaseFolder *CaseFolderForEncoding() override;
 	std::string CaseMapString(const std::string &s, int caseMapping) override;
@@ -2003,6 +2004,13 @@ void ScintillaWin::NotifyParent(SCNotification scn) {
 	              GetCtrlID(), reinterpret_cast<LPARAM>(&scn));
 }
 
+void ScintillaWin::NotifyParent(SCNotification* scn) {
+	scn->nmhdr.hwndFrom = MainHWND();
+	scn->nmhdr.idFrom = GetCtrlID();
+	::SendMessage(::GetParent(MainHWND()), WM_NOTIFY,
+		GetCtrlID(), reinterpret_cast<LPARAM>(scn));
+}
+
 void ScintillaWin::NotifyDoubleClick(Point pt, int modifiers) {
 	//Platform::DebugPrintf("ScintillaWin Double click 0\n");
 	ScintillaBase::NotifyDoubleClick(pt, modifiers);
